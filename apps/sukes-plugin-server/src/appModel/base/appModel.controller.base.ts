/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AppModelService } from "../appModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AppModelCreateInput } from "./AppModelCreateInput";
import { AppModel } from "./AppModel";
import { AppModelFindManyArgs } from "./AppModelFindManyArgs";
import { AppModelWhereUniqueInput } from "./AppModelWhereUniqueInput";
import { AppModelUpdateInput } from "./AppModelUpdateInput";
import { CookieFindManyArgs } from "../../cookie/base/CookieFindManyArgs";
import { Cookie } from "../../cookie/base/Cookie";
import { CookieWhereUniqueInput } from "../../cookie/base/CookieWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AppModelControllerBase {
  constructor(
    protected readonly service: AppModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppModel })
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAppModel(
    @common.Body() data: AppModelCreateInput
  ): Promise<AppModel> {
    return await this.service.createAppModel({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AppModel] })
  @ApiNestedQuery(AppModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async appModels(@common.Req() request: Request): Promise<AppModel[]> {
    const args = plainToClass(AppModelFindManyArgs, request.query);
    return this.service.appModels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async appModel(
    @common.Param() params: AppModelWhereUniqueInput
  ): Promise<AppModel | null> {
    const result = await this.service.appModel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAppModel(
    @common.Param() params: AppModelWhereUniqueInput,
    @common.Body() data: AppModelUpdateInput
  ): Promise<AppModel | null> {
    try {
      return await this.service.updateAppModel({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAppModel(
    @common.Param() params: AppModelWhereUniqueInput
  ): Promise<AppModel | null> {
    try {
      return await this.service.deleteAppModel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cookies")
  @ApiNestedQuery(CookieFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "any",
  })
  async findCookies(
    @common.Req() request: Request,
    @common.Param() params: AppModelWhereUniqueInput
  ): Promise<Cookie[]> {
    const query = plainToClass(CookieFindManyArgs, request.query);
    const results = await this.service.findCookies(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,

        appField: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cookies")
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "update",
    possession: "any",
  })
  async connectCookies(
    @common.Param() params: AppModelWhereUniqueInput,
    @common.Body() body: CookieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cookies: {
        connect: body,
      },
    };
    await this.service.updateAppModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cookies")
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "update",
    possession: "any",
  })
  async updateCookies(
    @common.Param() params: AppModelWhereUniqueInput,
    @common.Body() body: CookieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cookies: {
        set: body,
      },
    };
    await this.service.updateAppModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cookies")
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "update",
    possession: "any",
  })
  async disconnectCookies(
    @common.Param() params: AppModelWhereUniqueInput,
    @common.Body() body: CookieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cookies: {
        disconnect: body,
      },
    };
    await this.service.updateAppModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
