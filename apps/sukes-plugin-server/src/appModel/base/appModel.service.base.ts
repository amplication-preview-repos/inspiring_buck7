/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppModel as PrismaAppModel,
  Cookie as PrismaCookie,
  User as PrismaUser,
} from "@prisma/client";

export class AppModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AppModelCountArgs, "select">): Promise<number> {
    return this.prisma.appModel.count(args);
  }

  async appModels(
    args: Prisma.AppModelFindManyArgs
  ): Promise<PrismaAppModel[]> {
    return this.prisma.appModel.findMany(args);
  }
  async appModel(
    args: Prisma.AppModelFindUniqueArgs
  ): Promise<PrismaAppModel | null> {
    return this.prisma.appModel.findUnique(args);
  }
  async createAppModel(
    args: Prisma.AppModelCreateArgs
  ): Promise<PrismaAppModel> {
    return this.prisma.appModel.create(args);
  }
  async updateAppModel(
    args: Prisma.AppModelUpdateArgs
  ): Promise<PrismaAppModel> {
    return this.prisma.appModel.update(args);
  }
  async deleteAppModel(
    args: Prisma.AppModelDeleteArgs
  ): Promise<PrismaAppModel> {
    return this.prisma.appModel.delete(args);
  }

  async findCookies(
    parentId: string,
    args: Prisma.CookieFindManyArgs
  ): Promise<PrismaCookie[]> {
    return this.prisma.appModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cookies(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.appModel
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
