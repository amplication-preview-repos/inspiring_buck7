/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Cookie } from "./Cookie";
import { CookieCountArgs } from "./CookieCountArgs";
import { CookieFindManyArgs } from "./CookieFindManyArgs";
import { CookieFindUniqueArgs } from "./CookieFindUniqueArgs";
import { CreateCookieArgs } from "./CreateCookieArgs";
import { UpdateCookieArgs } from "./UpdateCookieArgs";
import { DeleteCookieArgs } from "./DeleteCookieArgs";
import { AppModel } from "../../appModel/base/AppModel";
import { CookieService } from "../cookie.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Cookie)
export class CookieResolverBase {
  constructor(
    protected readonly service: CookieService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "any",
  })
  async _cookiesMeta(
    @graphql.Args() args: CookieCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Cookie])
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "any",
  })
  async cookies(@graphql.Args() args: CookieFindManyArgs): Promise<Cookie[]> {
    return this.service.cookies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Cookie, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "own",
  })
  async cookie(
    @graphql.Args() args: CookieFindUniqueArgs
  ): Promise<Cookie | null> {
    const result = await this.service.cookie(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cookie)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "create",
    possession: "any",
  })
  async createCookie(@graphql.Args() args: CreateCookieArgs): Promise<Cookie> {
    return await this.service.createCookie({
      ...args,
      data: {
        ...args.data,

        appField: args.data.appField
          ? {
              connect: args.data.appField,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cookie)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "update",
    possession: "any",
  })
  async updateCookie(
    @graphql.Args() args: UpdateCookieArgs
  ): Promise<Cookie | null> {
    try {
      return await this.service.updateCookie({
        ...args,
        data: {
          ...args.data,

          appField: args.data.appField
            ? {
                connect: args.data.appField,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cookie)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "delete",
    possession: "any",
  })
  async deleteCookie(
    @graphql.Args() args: DeleteCookieArgs
  ): Promise<Cookie | null> {
    try {
      return await this.service.deleteCookie(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppModel, {
    nullable: true,
    name: "appField",
  })
  @nestAccessControl.UseRoles({
    resource: "AppModel",
    action: "read",
    possession: "any",
  })
  async getAppField(
    @graphql.Parent() parent: Cookie
  ): Promise<AppModel | null> {
    const result = await this.service.getAppField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
