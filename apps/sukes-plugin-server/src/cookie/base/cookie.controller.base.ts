/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CookieService } from "../cookie.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CookieCreateInput } from "./CookieCreateInput";
import { Cookie } from "./Cookie";
import { CookieFindManyArgs } from "./CookieFindManyArgs";
import { CookieWhereUniqueInput } from "./CookieWhereUniqueInput";
import { CookieUpdateInput } from "./CookieUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CookieControllerBase {
  constructor(
    protected readonly service: CookieService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cookie })
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCookie(@common.Body() data: CookieCreateInput): Promise<Cookie> {
    return await this.service.createCookie({
      data: {
        ...data,

        appField: data.appField
          ? {
              connect: data.appField,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,

        appField: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Cookie] })
  @ApiNestedQuery(CookieFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cookies(@common.Req() request: Request): Promise<Cookie[]> {
    const args = plainToClass(CookieFindManyArgs, request.query);
    return this.service.cookies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,

        appField: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cookie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cookie(
    @common.Param() params: CookieWhereUniqueInput
  ): Promise<Cookie | null> {
    const result = await this.service.cookie({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,

        appField: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cookie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCookie(
    @common.Param() params: CookieWhereUniqueInput,
    @common.Body() data: CookieUpdateInput
  ): Promise<Cookie | null> {
    try {
      return await this.service.updateCookie({
        where: params,
        data: {
          ...data,

          appField: data.appField
            ? {
                connect: data.appField,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          data: true,

          appField: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cookie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cookie",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCookie(
    @common.Param() params: CookieWhereUniqueInput
  ): Promise<Cookie | null> {
    try {
      return await this.service.deleteCookie({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          data: true,

          appField: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
