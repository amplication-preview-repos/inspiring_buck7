/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cookie as PrismaCookie,
  AppModel as PrismaAppModel,
} from "@prisma/client";

export class CookieServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CookieCountArgs, "select">): Promise<number> {
    return this.prisma.cookie.count(args);
  }

  async cookies(args: Prisma.CookieFindManyArgs): Promise<PrismaCookie[]> {
    return this.prisma.cookie.findMany(args);
  }
  async cookie(
    args: Prisma.CookieFindUniqueArgs
  ): Promise<PrismaCookie | null> {
    return this.prisma.cookie.findUnique(args);
  }
  async createCookie(args: Prisma.CookieCreateArgs): Promise<PrismaCookie> {
    return this.prisma.cookie.create(args);
  }
  async updateCookie(args: Prisma.CookieUpdateArgs): Promise<PrismaCookie> {
    return this.prisma.cookie.update(args);
  }
  async deleteCookie(args: Prisma.CookieDeleteArgs): Promise<PrismaCookie> {
    return this.prisma.cookie.delete(args);
  }

  async getAppField(parentId: string): Promise<PrismaAppModel | null> {
    return this.prisma.cookie
      .findUnique({
        where: { id: parentId },
      })
      .appField();
  }
}
